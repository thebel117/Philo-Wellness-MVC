// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhiloWellnessMVC.Data;

#nullable disable

namespace PhiloWellnessMVC.Data.Migrations
{
    [DbContext(typeof(PhiloWellnessDbContext))]
    partial class PhiloWellnessDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PhiloWellnessMVC.Data.Entities.StudentProfileEntity", b =>
                {
                    b.Property<string>("StudentProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StudentIdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentProfiles");
                });

            modelBuilder.Entity("PhiloWellnessMVC.Data.Entities.UserEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PhiloWellnessMVC.Data.Entities.VisitEntity", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitId"));

                    b.Property<string>("DetailedReason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ReasonForVisit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VisitId");

                    b.HasIndex("StudentProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("PhiloWellnessMVC.Data.Entities.WellnessEntity", b =>
                {
                    b.Property<string>("WellnessId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacultyRating")
                        .HasColumnType("int");

                    b.Property<string>("IncidentNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SelfRating")
                        .HasColumnType("int");

                    b.Property<string>("StudentProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WellnessId");

                    b.HasIndex("StudentProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("WellnessRatings");
                });

            modelBuilder.Entity("PhiloWellnessMVC.Data.Entities.StudentProfileEntity", b =>
                {
                    b.HasOne("PhiloWellnessMVC.Data.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhiloWellnessMVC.Data.Entities.VisitEntity", b =>
                {
                    b.HasOne("PhiloWellnessMVC.Data.Entities.StudentProfileEntity", "StudentProfile")
                        .WithMany("Visits")
                        .HasForeignKey("StudentProfileId");

                    b.HasOne("PhiloWellnessMVC.Data.Entities.UserEntity", "User")
                        .WithMany("Visits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentProfile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhiloWellnessMVC.Data.Entities.WellnessEntity", b =>
                {
                    b.HasOne("PhiloWellnessMVC.Data.Entities.StudentProfileEntity", "StudentProfile")
                        .WithMany("WellnessRatings")
                        .HasForeignKey("StudentProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PhiloWellnessMVC.Data.Entities.UserEntity", "User")
                        .WithMany("WellnessRatings")
                        .HasForeignKey("UserId");

                    b.Navigation("StudentProfile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhiloWellnessMVC.Data.Entities.StudentProfileEntity", b =>
                {
                    b.Navigation("Visits");

                    b.Navigation("WellnessRatings");
                });

            modelBuilder.Entity("PhiloWellnessMVC.Data.Entities.UserEntity", b =>
                {
                    b.Navigation("Visits");

                    b.Navigation("WellnessRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
